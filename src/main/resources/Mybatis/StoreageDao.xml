<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yunjing.emer.dao.StoreageDao">
  <resultMap id="BaseResultMap" type="com.yunjing.emer.entity.Storeage">
    <id column="storeage_id" jdbcType="INTEGER" property="storeageId" />
    <result column="company_id" jdbcType="INTEGER" property="companyId" />
    <result column="transport_day" jdbcType="DOUBLE" property="transportDay" />
    <result column="car_num" jdbcType="INTEGER" property="carNum" />
    <result column="transport_day_real" jdbcType="DOUBLE" property="transportDayReal" />
    <result column="state" jdbcType="INTEGER" property="state" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    storeage_id, company_id, transport_day, car_num, transport_day_real, `state`
  </sql>
  <select id="selectStoreageByCompanyLevel" parameterType="com.yunjing.emer.entity.User" resultMap="BaseResultMap" >
    select * from storeage as s,company_info as c
    where s.company_id = c.company_id
    and c.level >= #{type}
    <if test="province != null and type == 1">
      and c.province = #{province}
    </if>
    <if test="province == null">
      and c.province = 'false'
    </if>
    <if test="city != null and type == 2">
      and c.city = #{city}
    </if>
    <if test="city == null">
      and c.city = 'false'
    </if>
    <if test="county != null and type == 3">
      and c.county = #{county}
    </if>
    <if test="county == null">
      and c.county = 'false'
    </if>
  </select>
  <select id="selectStoreageByPageDate" resultMap="BaseResultMap" >
    select * from storeage as s,company_info as c
    where s.company_id = c.company_id
    and c.level >= #{user.type}
    and c.time between #{time1} AND #{time2}
    <if test="user.province != null and user.type == 1">
      and c.province = #{user.province}
    </if>
    <if test="user.province == null">
      and c.province = 'false'
    </if>
    <if test="user.city != null and user.type == 2">
      and c.city = #{user.city}
    </if>
    <if test="user.city == null">
      and c.city = 'false'
    </if>
    <if test="user.county != null and user.type == 3">
      and c.county = #{user.county}
    </if>
    <if test="user.county == null">
      and c.county = 'false'
    </if>
  </select>
  <select id="selectByExample" parameterType="com.yunjing.emer.entity.StoreageExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from storeage
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from storeage
    where storeage_id = #{storeageId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from storeage
    where storeage_id = #{storeageId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.yunjing.emer.entity.StoreageExample">
    delete from storeage
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="storeage_id" keyProperty="storeageId" parameterType="com.yunjing.emer.entity.Storeage" useGeneratedKeys="true">
    insert into storeage (company_id, transport_day, car_num, 
      transport_day_real, `state`)
    values (#{companyId,jdbcType=INTEGER}, #{transportDay,jdbcType=DOUBLE}, #{carNum,jdbcType=INTEGER}, 
      #{transportDayReal,jdbcType=DOUBLE}, #{state,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" keyColumn="storeage_id" keyProperty="storeageId" parameterType="com.yunjing.emer.entity.Storeage" useGeneratedKeys="true">
    insert into storeage
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="companyId != null">
        company_id,
      </if>
      <if test="transportDay != null">
        transport_day,
      </if>
      <if test="carNum != null">
        car_num,
      </if>
      <if test="transportDayReal != null">
        transport_day_real,
      </if>
      <if test="state != null">
        `state`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="companyId != null">
        #{companyId,jdbcType=INTEGER},
      </if>
      <if test="transportDay != null">
        #{transportDay,jdbcType=DOUBLE},
      </if>
      <if test="carNum != null">
        #{carNum,jdbcType=INTEGER},
      </if>
      <if test="transportDayReal != null">
        #{transportDayReal,jdbcType=DOUBLE},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.yunjing.emer.entity.StoreageExample" resultType="java.lang.Long">
    select count(*) from storeage
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update storeage
    <set>
      <if test="record.storeageId != null">
        storeage_id = #{record.storeageId,jdbcType=INTEGER},
      </if>
      <if test="record.companyId != null">
        company_id = #{record.companyId,jdbcType=INTEGER},
      </if>
      <if test="record.transportDay != null">
        transport_day = #{record.transportDay,jdbcType=DOUBLE},
      </if>
      <if test="record.carNum != null">
        car_num = #{record.carNum,jdbcType=INTEGER},
      </if>
      <if test="record.transportDayReal != null">
        transport_day_real = #{record.transportDayReal,jdbcType=DOUBLE},
      </if>
      <if test="record.state != null">
        `state` = #{record.state,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update storeage
    set storeage_id = #{record.storeageId,jdbcType=INTEGER},
      company_id = #{record.companyId,jdbcType=INTEGER},
      transport_day = #{record.transportDay,jdbcType=DOUBLE},
      car_num = #{record.carNum,jdbcType=INTEGER},
      transport_day_real = #{record.transportDayReal,jdbcType=DOUBLE},
      `state` = #{record.state,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.yunjing.emer.entity.Storeage">
    update storeage
    <set>
      <if test="companyId != null">
        company_id = #{companyId,jdbcType=INTEGER},
      </if>
      <if test="transportDay != null">
        transport_day = #{transportDay,jdbcType=DOUBLE},
      </if>
      <if test="carNum != null">
        car_num = #{carNum,jdbcType=INTEGER},
      </if>
      <if test="transportDayReal != null">
        transport_day_real = #{transportDayReal,jdbcType=DOUBLE},
      </if>
      <if test="state != null">
        `state` = #{state,jdbcType=INTEGER},
      </if>
    </set>
    where storeage_id = #{storeageId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yunjing.emer.entity.Storeage">
    update storeage
    set company_id = #{companyId,jdbcType=INTEGER},
      transport_day = #{transportDay,jdbcType=DOUBLE},
      car_num = #{carNum,jdbcType=INTEGER},
      transport_day_real = #{transportDayReal,jdbcType=DOUBLE},
      `state` = #{state,jdbcType=INTEGER}
    where storeage_id = #{storeageId,jdbcType=INTEGER}
  </update>
  <select id="sumByProvince" resultMap="BaseResultMap">
    select sum(transport_day) as transport_day,
    sum(car_num) as car_num,sum(transport_day_real) as transport_day_real from emer.storeage a
    left outer join emer.company_info b on(a.company_id=b.company_id)
    where b.province in
    <foreach collection="list" item="provinces" index="index" open="(" close=")" separator=",">
      #{provinces}
    </foreach>
  </select>
</mapper>