<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yunjing.emer.dao.WebsiteDao">
  <resultMap id="BaseResultMap" type="com.yunjing.emer.entity.Website">
    <id column="website_id" jdbcType="INTEGER" property="websiteId" />
    <result column="company_id" jdbcType="INTEGER" property="companyId" />
    <result column="level" jdbcType="INTEGER" property="level" />
    <result column="flour_exp" jdbcType="DOUBLE" property="flourExp" />
    <result column="rice_exp" jdbcType="DOUBLE" property="riceExp" />
    <result column="oil_exp" jdbcType="DOUBLE" property="oilExp" />
    <result column="else_exp" jdbcType="DOUBLE" property="elseExp" />
    <result column="flour_real" jdbcType="DOUBLE" property="flourReal" />
    <result column="rice_real" jdbcType="DOUBLE" property="riceReal" />
    <result column="oil_real" jdbcType="DOUBLE" property="oilReal" />
    <result column="else_real" jdbcType="DOUBLE" property="elseReal" />
    <result column="state" jdbcType="INTEGER" property="state" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    website_id, company_id, `level`, flour_exp, rice_exp, oil_exp, else_exp, flour_real, 
    rice_real, oil_real, else_real, `state`
  </sql>
  <select id="selectWebsiteByCompanyLevel" parameterType="com.yunjing.emer.entity.User" resultMap="BaseResultMap" >
    select * from website as w,company_info as c
    where w.company_id = c.company_id
    and c.level >= #{type}
    <if test="province != null and type == 1">
      and c.province = #{province}
    </if>
    <if test="province == null">
      and c.province = 'false'
    </if>
    <if test="city != null and type == 2">
        and c.city = #{city}
    </if>
    <if test="city == null">
      and c.city = 'false'
    </if>
    <if test="county != null and type == 3">
      and c.county = #{county}
    </if>
    <if test="county == null">
      and c.county = 'false'
    </if>
  </select>
  <select id="selectWebsiteByPageDate" resultMap="BaseResultMap" >
    select * from website as w,company_info as c
    where w.company_id = c.company_id
    and c.level >= #{user.type}
    and c.time between #{time1} AND #{time2}
    <if test="user.province != null and user.type == 1">
      and c.province = #{user.province}
    </if>
    <if test="user.province == null">
      and c.province = 'false'
    </if>
    <if test="user.city != null and user.type == 2">
      and c.city = #{user.city}
    </if>
    <if test="user.city == null">
      and c.city = 'false'
    </if>
    <if test="user.county != null and user.type == 3">
      and c.county = #{user.county}
    </if>
    <if test="user.county == null">
      and c.county = 'false'
    </if>
  </select>
  <select id="selectByExample" parameterType="com.yunjing.emer.entity.WebsiteExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from website
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from website
    where website_id = #{websiteId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from website
    where website_id = #{websiteId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.yunjing.emer.entity.WebsiteExample">
    delete from website
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="website_id" keyProperty="websiteId" parameterType="com.yunjing.emer.entity.Website" useGeneratedKeys="true">
    insert into website (company_id, `level`, flour_exp, 
      rice_exp, oil_exp, else_exp, 
      flour_real, rice_real, oil_real, 
      else_real, `state`)
    values (#{companyId,jdbcType=INTEGER}, #{level,jdbcType=INTEGER}, #{flourExp,jdbcType=DOUBLE}, 
      #{riceExp,jdbcType=DOUBLE}, #{oilExp,jdbcType=DOUBLE}, #{elseExp,jdbcType=DOUBLE}, 
      #{flourReal,jdbcType=DOUBLE}, #{riceReal,jdbcType=DOUBLE}, #{oilReal,jdbcType=DOUBLE}, 
      #{elseReal,jdbcType=DOUBLE}, #{state,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" keyColumn="website_id" keyProperty="websiteId" parameterType="com.yunjing.emer.entity.Website" useGeneratedKeys="true">
    insert into website
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="companyId != null">
        company_id,
      </if>
      <if test="level != null">
        `level`,
      </if>
      <if test="flourExp != null">
        flour_exp,
      </if>
      <if test="riceExp != null">
        rice_exp,
      </if>
      <if test="oilExp != null">
        oil_exp,
      </if>
      <if test="elseExp != null">
        else_exp,
      </if>
      <if test="flourReal != null">
        flour_real,
      </if>
      <if test="riceReal != null">
        rice_real,
      </if>
      <if test="oilReal != null">
        oil_real,
      </if>
      <if test="elseReal != null">
        else_real,
      </if>
      <if test="state != null">
        `state`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="companyId != null">
        #{companyId,jdbcType=INTEGER},
      </if>
      <if test="level != null">
        #{level,jdbcType=INTEGER},
      </if>
      <if test="flourExp != null">
        #{flourExp,jdbcType=DOUBLE},
      </if>
      <if test="riceExp != null">
        #{riceExp,jdbcType=DOUBLE},
      </if>
      <if test="oilExp != null">
        #{oilExp,jdbcType=DOUBLE},
      </if>
      <if test="elseExp != null">
        #{elseExp,jdbcType=DOUBLE},
      </if>
      <if test="flourReal != null">
        #{flourReal,jdbcType=DOUBLE},
      </if>
      <if test="riceReal != null">
        #{riceReal,jdbcType=DOUBLE},
      </if>
      <if test="oilReal != null">
        #{oilReal,jdbcType=DOUBLE},
      </if>
      <if test="elseReal != null">
        #{elseReal,jdbcType=DOUBLE},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.yunjing.emer.entity.WebsiteExample" resultType="java.lang.Long">
    select count(*) from website
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update website
    <set>
      <if test="record.websiteId != null">
        website_id = #{record.websiteId,jdbcType=INTEGER},
      </if>
      <if test="record.companyId != null">
        company_id = #{record.companyId,jdbcType=INTEGER},
      </if>
      <if test="record.level != null">
        `level` = #{record.level,jdbcType=INTEGER},
      </if>
      <if test="record.flourExp != null">
        flour_exp = #{record.flourExp,jdbcType=DOUBLE},
      </if>
      <if test="record.riceExp != null">
        rice_exp = #{record.riceExp,jdbcType=DOUBLE},
      </if>
      <if test="record.oilExp != null">
        oil_exp = #{record.oilExp,jdbcType=DOUBLE},
      </if>
      <if test="record.elseExp != null">
        else_exp = #{record.elseExp,jdbcType=DOUBLE},
      </if>
      <if test="record.flourReal != null">
        flour_real = #{record.flourReal,jdbcType=DOUBLE},
      </if>
      <if test="record.riceReal != null">
        rice_real = #{record.riceReal,jdbcType=DOUBLE},
      </if>
      <if test="record.oilReal != null">
        oil_real = #{record.oilReal,jdbcType=DOUBLE},
      </if>
      <if test="record.elseReal != null">
        else_real = #{record.elseReal,jdbcType=DOUBLE},
      </if>
      <if test="record.state != null">
        `state` = #{record.state,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update website
    set website_id = #{record.websiteId,jdbcType=INTEGER},
      company_id = #{record.companyId,jdbcType=INTEGER},
      `level` = #{record.level,jdbcType=INTEGER},
      flour_exp = #{record.flourExp,jdbcType=DOUBLE},
      rice_exp = #{record.riceExp,jdbcType=DOUBLE},
      oil_exp = #{record.oilExp,jdbcType=DOUBLE},
      else_exp = #{record.elseExp,jdbcType=DOUBLE},
      flour_real = #{record.flourReal,jdbcType=DOUBLE},
      rice_real = #{record.riceReal,jdbcType=DOUBLE},
      oil_real = #{record.oilReal,jdbcType=DOUBLE},
      else_real = #{record.elseReal,jdbcType=DOUBLE},
      `state` = #{record.state,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.yunjing.emer.entity.Website">
    update website
    <set>
      <if test="companyId != null">
        company_id = #{companyId,jdbcType=INTEGER},
      </if>
      <if test="level != null">
        `level` = #{level,jdbcType=INTEGER},
      </if>
      <if test="flourExp != null">
        flour_exp = #{flourExp,jdbcType=DOUBLE},
      </if>
      <if test="riceExp != null">
        rice_exp = #{riceExp,jdbcType=DOUBLE},
      </if>
      <if test="oilExp != null">
        oil_exp = #{oilExp,jdbcType=DOUBLE},
      </if>
      <if test="elseExp != null">
        else_exp = #{elseExp,jdbcType=DOUBLE},
      </if>
      <if test="flourReal != null">
        flour_real = #{flourReal,jdbcType=DOUBLE},
      </if>
      <if test="riceReal != null">
        rice_real = #{riceReal,jdbcType=DOUBLE},
      </if>
      <if test="oilReal != null">
        oil_real = #{oilReal,jdbcType=DOUBLE},
      </if>
      <if test="elseReal != null">
        else_real = #{elseReal,jdbcType=DOUBLE},
      </if>
      <if test="state != null">
        `state` = #{state,jdbcType=INTEGER},
      </if>
    </set>
    where website_id = #{websiteId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yunjing.emer.entity.Website">
    update website
    set company_id = #{companyId,jdbcType=INTEGER},
      `level` = #{level,jdbcType=INTEGER},
      flour_exp = #{flourExp,jdbcType=DOUBLE},
      rice_exp = #{riceExp,jdbcType=DOUBLE},
      oil_exp = #{oilExp,jdbcType=DOUBLE},
      else_exp = #{elseExp,jdbcType=DOUBLE},
      flour_real = #{flourReal,jdbcType=DOUBLE},
      rice_real = #{riceReal,jdbcType=DOUBLE},
      oil_real = #{oilReal,jdbcType=DOUBLE},
      else_real = #{elseReal,jdbcType=DOUBLE},
      `state` = #{state,jdbcType=INTEGER}
    where website_id = #{websiteId,jdbcType=INTEGER}
  </update>
  <select id="sumByExample" parameterType="com.yunjing.emer.entity.WebsiteExample" resultMap="BaseResultMap">
    select sum(flour_exp) as flour_exp,sum(rice_exp) as rice_exp,sum(oil_exp) as oil_exp,
    sum(else_exp) as else_exp,sum(flour_real) as flour_real,sum(rice_real) as rice_real,
    sum(oil_real) as oil_real,sum(else_real) as else_real
    from website
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <select id="sumByProvince" resultMap="BaseResultMap">
    select sum(flour_exp) as flour_exp,sum(rice_exp) as rice_exp,sum(oil_exp) as oil_exp,
    sum(else_exp) as else_exp,sum(flour_real) as flour_real,sum(rice_real) as rice_real,
    sum(oil_real) as oil_real,sum(else_real) as else_real
    from emer.website a left outer join emer.company_info b on(a.company_id=b.company_id)
    where b.province = #{province}
  </select>
  <select id="countByProvinceState" resultType="java.lang.Long">
    select count(*)
    from emer.website a left outer join emer.company_info b on(a.company_id=b.company_id)
    where b.province = #{province} and a.state = #{state}
  </select>
  <select id="sumByUser" resultMap="BaseResultMap">
    select sum(flour_exp) as flour_exp,sum(rice_exp) as rice_exp,sum(oil_exp) as oil_exp,
    sum(else_exp) as else_exp,sum(flour_real) as flour_real,sum(rice_real) as rice_real,
    sum(oil_real) as oil_real,sum(else_real) as else_real
    from emer.website a left outer join emer.company_info c on(a.company_id=c.company_id)
    where c.level >= #{type}
    <if test="province != null and type == 1">
      and c.province = #{province}
    </if>
    <if test="province == null">
      and c.province = 'false'
    </if>
    <if test="city != null and type == 2">
      and c.city = #{city}
    </if>
    <if test="city == null">
      and c.city = 'false'
    </if>
    <if test="county != null and type == 3">
      and c.county = #{county}
    </if>
    <if test="county == null">
      and c.county = 'false'
    </if>
  </select>
  <select id="sumByUserAndProvince" resultMap="BaseResultMap">
    select sum(flour_exp) as flour_exp,sum(rice_exp) as rice_exp,sum(oil_exp) as oil_exp,
    sum(else_exp) as else_exp,sum(flour_real) as flour_real,sum(rice_real) as rice_real,
    sum(oil_real) as oil_real,sum(else_real) as else_real
    from emer.website a left outer join emer.company_info c on(a.company_id=c.company_id)
    where c.level >= #{user.type}
    and c.province = #{province}
  </select>
  <select id="sumByUserAndCity" resultMap="BaseResultMap">
    select sum(flour_exp) as flour_exp,sum(rice_exp) as rice_exp,sum(oil_exp) as oil_exp,
    sum(else_exp) as else_exp,sum(flour_real) as flour_real,sum(rice_real) as rice_real,
    sum(oil_real) as oil_real,sum(else_real) as else_real
    from emer.website a left outer join emer.company_info c on(a.company_id=c.company_id)
    where c.level >= #{user.type}
    and c.city = #{city}
  </select>
  <select id="sumByUserAndCountry" resultMap="BaseResultMap">
    select sum(flour_exp) as flour_exp,sum(rice_exp) as rice_exp,sum(oil_exp) as oil_exp,
    sum(else_exp) as else_exp,sum(flour_real) as flour_real,sum(rice_real) as rice_real,
    sum(oil_real) as oil_real,sum(else_real) as else_real
    from emer.website a left outer join emer.company_info c on(a.company_id=c.company_id)
    where c.level >= #{user.type}
    and c.county = #{country}
  </select>
</mapper>